// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFlightInformationRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFlightInformationResponse {
    #[prost(message, optional, tag = "1")]
    pub info_result: ::core::option::Option<InfoResult>,
    /// Flight information of the system
    #[prost(message, optional, tag = "2")]
    pub flight_info: ::core::option::Option<FlightInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentificationRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIdentificationResponse {
    #[prost(message, optional, tag = "1")]
    pub info_result: ::core::option::Option<InfoResult>,
    /// Identification of the system
    #[prost(message, optional, tag = "2")]
    pub identification: ::core::option::Option<Identification>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProductRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProductResponse {
    #[prost(message, optional, tag = "1")]
    pub info_result: ::core::option::Option<InfoResult>,
    /// Product information of the system
    #[prost(message, optional, tag = "2")]
    pub product: ::core::option::Option<Product>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVersionRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVersionResponse {
    #[prost(message, optional, tag = "1")]
    pub info_result: ::core::option::Option<InfoResult>,
    /// Version information about the system
    #[prost(message, optional, tag = "2")]
    pub version: ::core::option::Option<Version>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSpeedFactorRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSpeedFactorResponse {
    #[prost(message, optional, tag = "1")]
    pub info_result: ::core::option::Option<InfoResult>,
    /// Speed factor of simulation
    #[prost(double, tag = "2")]
    pub speed_factor: f64,
}
/// System flight information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FlightInfo {
    /// Time since system boot
    #[prost(uint32, tag = "1")]
    pub time_boot_ms: u32,
    /// Flight counter. Starts from zero, is incremented at every disarm and is never reset (even after reboot)
    #[prost(uint64, tag = "2")]
    pub flight_uid: u64,
}
/// System identification.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Identification {
    /// UID of the hardware. This refers to uid2 of MAVLink. If the system does not support uid2 yet, this is all zeros.
    #[prost(string, tag = "1")]
    pub hardware_uid: ::prost::alloc::string::String,
    /// Legacy UID of the hardware, referred to as uid in MAVLink (formerly exposed during system discovery as UUID).
    #[prost(uint64, tag = "2")]
    pub legacy_uid: u64,
}
/// System product information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Product {
    /// ID of the board vendor
    #[prost(int32, tag = "1")]
    pub vendor_id: i32,
    /// Name of the vendor
    #[prost(string, tag = "2")]
    pub vendor_name: ::prost::alloc::string::String,
    /// ID of the product
    #[prost(int32, tag = "3")]
    pub product_id: i32,
    /// Name of the product
    #[prost(string, tag = "4")]
    pub product_name: ::prost::alloc::string::String,
}
/// System version information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Version {
    /// Flight software major version
    #[prost(int32, tag = "1")]
    pub flight_sw_major: i32,
    /// Flight software minor version
    #[prost(int32, tag = "2")]
    pub flight_sw_minor: i32,
    /// Flight software patch version
    #[prost(int32, tag = "3")]
    pub flight_sw_patch: i32,
    /// Flight software vendor major version
    #[prost(int32, tag = "4")]
    pub flight_sw_vendor_major: i32,
    /// Flight software vendor minor version
    #[prost(int32, tag = "5")]
    pub flight_sw_vendor_minor: i32,
    /// Flight software vendor patch version
    #[prost(int32, tag = "6")]
    pub flight_sw_vendor_patch: i32,
    /// Operating system software major version
    #[prost(int32, tag = "7")]
    pub os_sw_major: i32,
    /// Operating system software minor version
    #[prost(int32, tag = "8")]
    pub os_sw_minor: i32,
    /// Operating system software patch version
    #[prost(int32, tag = "9")]
    pub os_sw_patch: i32,
    /// Flight software git hash
    #[prost(string, tag = "10")]
    pub flight_sw_git_hash: ::prost::alloc::string::String,
    /// Operating system software git hash
    #[prost(string, tag = "11")]
    pub os_sw_git_hash: ::prost::alloc::string::String,
}
/// Result type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InfoResult {
    /// Result enum value
    #[prost(enumeration = "info_result::Result", tag = "1")]
    pub result: i32,
    /// Human-readable English string describing the result
    #[prost(string, tag = "2")]
    pub result_str: ::prost::alloc::string::String,
}
/// Nested message and enum types in `InfoResult`.
pub mod info_result {
    /// Possible results returned for info requests.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Result {
        /// Unknown result
        Unknown = 0,
        /// Request succeeded
        Success = 1,
        /// Information has not been received yet
        InformationNotReceivedYet = 2,
        /// No system is connected
        NoSystem = 3,
    }
    impl Result {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Result::Unknown => "RESULT_UNKNOWN",
                Result::Success => "RESULT_SUCCESS",
                Result::InformationNotReceivedYet => {
                    "RESULT_INFORMATION_NOT_RECEIVED_YET"
                }
                Result::NoSystem => "RESULT_NO_SYSTEM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "RESULT_UNKNOWN" => Some(Self::Unknown),
                "RESULT_SUCCESS" => Some(Self::Success),
                "RESULT_INFORMATION_NOT_RECEIVED_YET" => {
                    Some(Self::InformationNotReceivedYet)
                }
                "RESULT_NO_SYSTEM" => Some(Self::NoSystem),
                _ => None,
            }
        }
    }
}
/// Generated client implementations.
pub mod info_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provide information about the hardware and/or software of a system.
    #[derive(Debug, Clone)]
    pub struct InfoServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl InfoServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> InfoServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InfoServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            InfoServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Get flight information of the system.
        pub async fn get_flight_information(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFlightInformationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFlightInformationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.info.InfoService/GetFlightInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.info.InfoService",
                        "GetFlightInformation",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get the identification of the system.
        pub async fn get_identification(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIdentificationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetIdentificationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.info.InfoService/GetIdentification",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.info.InfoService", "GetIdentification"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get product information of the system.
        pub async fn get_product(
            &mut self,
            request: impl tonic::IntoRequest<super::GetProductRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetProductResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.info.InfoService/GetProduct",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.info.InfoService", "GetProduct"));
            self.inner.unary(req, path, codec).await
        }
        /// Get the version information of the system.
        pub async fn get_version(
            &mut self,
            request: impl tonic::IntoRequest<super::GetVersionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetVersionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.info.InfoService/GetVersion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.info.InfoService", "GetVersion"));
            self.inner.unary(req, path, codec).await
        }
        /// Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
        pub async fn get_speed_factor(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSpeedFactorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSpeedFactorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.info.InfoService/GetSpeedFactor",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.info.InfoService", "GetSpeedFactor"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
