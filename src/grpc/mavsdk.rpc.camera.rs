// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrepareRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrepareResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePhotoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePhotoResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartPhotoIntervalRequest {
    /// Interval between photos (in seconds)
    #[prost(float, tag = "1")]
    pub interval_s: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartPhotoIntervalResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopPhotoIntervalRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopPhotoIntervalResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartVideoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartVideoResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopVideoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopVideoResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartVideoStreamingRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartVideoStreamingResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopVideoStreamingRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StopVideoStreamingResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetModeRequest {
    /// Camera mode to set
    #[prost(enumeration = "Mode", tag = "1")]
    pub mode: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetModeResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPhotosRequest {
    /// Which photos should be listed (all or since connection)
    #[prost(enumeration = "PhotosRange", tag = "1")]
    pub photos_range: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPhotosResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
    /// List of capture infos (representing the photos)
    #[prost(message, repeated, tag = "2")]
    pub capture_infos: ::prost::alloc::vec::Vec<CaptureInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeInformationRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InformationResponse {
    /// Camera information
    #[prost(message, optional, tag = "1")]
    pub information: ::core::option::Option<Information>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeModeRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModeResponse {
    /// Camera mode
    #[prost(enumeration = "Mode", tag = "1")]
    pub mode: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeVideoStreamInfoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoStreamInfoResponse {
    /// Video stream info
    #[prost(message, optional, tag = "1")]
    pub video_stream_info: ::core::option::Option<VideoStreamInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeCaptureInfoRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CaptureInfoResponse {
    /// Capture info
    #[prost(message, optional, tag = "1")]
    pub capture_info: ::core::option::Option<CaptureInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeStatusRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    /// Camera status
    #[prost(message, optional, tag = "1")]
    pub camera_status: ::core::option::Option<Status>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeCurrentSettingsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CurrentSettingsResponse {
    /// List of current settings
    #[prost(message, repeated, tag = "1")]
    pub current_settings: ::prost::alloc::vec::Vec<Setting>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribePossibleSettingOptionsRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PossibleSettingOptionsResponse {
    /// List of settings that can be changed
    #[prost(message, repeated, tag = "1")]
    pub setting_options: ::prost::alloc::vec::Vec<SettingOptions>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSettingRequest {
    /// Desired setting
    #[prost(message, optional, tag = "1")]
    pub setting: ::core::option::Option<Setting>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSettingResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSettingRequest {
    /// Requested setting
    #[prost(message, optional, tag = "1")]
    pub setting: ::core::option::Option<Setting>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSettingResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
    /// Setting
    #[prost(message, optional, tag = "2")]
    pub setting: ::core::option::Option<Setting>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FormatStorageRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FormatStorageResponse {
    #[prost(message, optional, tag = "1")]
    pub camera_result: ::core::option::Option<CameraResult>,
}
/// Result type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CameraResult {
    /// Result enum value
    #[prost(enumeration = "camera_result::Result", tag = "1")]
    pub result: i32,
    /// Human-readable English string describing the result
    #[prost(string, tag = "2")]
    pub result_str: ::prost::alloc::string::String,
}
/// Nested message and enum types in `CameraResult`.
pub mod camera_result {
    /// Possible results returned for camera commands
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Result {
        /// Unknown result
        Unknown = 0,
        /// Command executed successfully
        Success = 1,
        /// Command in progress
        InProgress = 2,
        /// Camera is busy and rejected command
        Busy = 3,
        /// Camera denied the command
        Denied = 4,
        /// An error has occurred while executing the command
        Error = 5,
        /// Command timed out
        Timeout = 6,
        /// Command has wrong argument(s)
        WrongArgument = 7,
        /// No system connected
        NoSystem = 8,
    }
    impl Result {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Result::Unknown => "RESULT_UNKNOWN",
                Result::Success => "RESULT_SUCCESS",
                Result::InProgress => "RESULT_IN_PROGRESS",
                Result::Busy => "RESULT_BUSY",
                Result::Denied => "RESULT_DENIED",
                Result::Error => "RESULT_ERROR",
                Result::Timeout => "RESULT_TIMEOUT",
                Result::WrongArgument => "RESULT_WRONG_ARGUMENT",
                Result::NoSystem => "RESULT_NO_SYSTEM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "RESULT_UNKNOWN" => Some(Self::Unknown),
                "RESULT_SUCCESS" => Some(Self::Success),
                "RESULT_IN_PROGRESS" => Some(Self::InProgress),
                "RESULT_BUSY" => Some(Self::Busy),
                "RESULT_DENIED" => Some(Self::Denied),
                "RESULT_ERROR" => Some(Self::Error),
                "RESULT_TIMEOUT" => Some(Self::Timeout),
                "RESULT_WRONG_ARGUMENT" => Some(Self::WrongArgument),
                "RESULT_NO_SYSTEM" => Some(Self::NoSystem),
                _ => None,
            }
        }
    }
}
/// Position type in global coordinates.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Position {
    /// Latitude in degrees (range: -90 to +90)
    #[prost(double, tag = "1")]
    pub latitude_deg: f64,
    /// Longitude in degrees (range: -180 to +180)
    #[prost(double, tag = "2")]
    pub longitude_deg: f64,
    /// Altitude AMSL (above mean sea level) in metres
    #[prost(float, tag = "3")]
    pub absolute_altitude_m: f32,
    /// Altitude relative to takeoff altitude in metres
    #[prost(float, tag = "4")]
    pub relative_altitude_m: f32,
}
///
/// Quaternion type.
///
/// All rotations and axis systems follow the right-hand rule.
/// The Hamilton quaternion product definition is used.
/// A zero-rotation quaternion is represented by (1,0,0,0).
/// The quaternion could also be written as w + xi + yj + zk.
///
/// For more info see: <https://en.wikipedia.org/wiki/Quaternion>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Quaternion {
    /// Quaternion entry 0, also denoted as a
    #[prost(float, tag = "1")]
    pub w: f32,
    /// Quaternion entry 1, also denoted as b
    #[prost(float, tag = "2")]
    pub x: f32,
    /// Quaternion entry 2, also denoted as c
    #[prost(float, tag = "3")]
    pub y: f32,
    /// Quaternion entry 3, also denoted as d
    #[prost(float, tag = "4")]
    pub z: f32,
}
///
/// Euler angle type.
///
/// All rotations and axis systems follow the right-hand rule.
/// The Euler angles follow the convention of a 3-2-1 intrinsic Tait-Bryan rotation sequence.
///
/// For more info see <https://en.wikipedia.org/wiki/Euler_angles>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EulerAngle {
    /// Roll angle in degrees, positive is banking to the right
    #[prost(float, tag = "1")]
    pub roll_deg: f32,
    /// Pitch angle in degrees, positive is pitching nose up
    #[prost(float, tag = "2")]
    pub pitch_deg: f32,
    /// Yaw angle in degrees, positive is clock-wise seen from above
    #[prost(float, tag = "3")]
    pub yaw_deg: f32,
}
/// Information about a picture just captured.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CaptureInfo {
    /// Location where the picture was taken
    #[prost(message, optional, tag = "1")]
    pub position: ::core::option::Option<Position>,
    /// Attitude of the camera when the picture was taken (quaternion)
    #[prost(message, optional, tag = "2")]
    pub attitude_quaternion: ::core::option::Option<Quaternion>,
    /// Attitude of the camera when the picture was taken (euler angle)
    #[prost(message, optional, tag = "3")]
    pub attitude_euler_angle: ::core::option::Option<EulerAngle>,
    /// Timestamp in UTC (since UNIX epoch) in microseconds
    #[prost(uint64, tag = "4")]
    pub time_utc_us: u64,
    /// True if the capture was successful
    #[prost(bool, tag = "5")]
    pub is_success: bool,
    /// Zero-based index of this image since vehicle was armed
    #[prost(int32, tag = "6")]
    pub index: i32,
    /// Download URL of this image
    #[prost(string, tag = "7")]
    pub file_url: ::prost::alloc::string::String,
}
/// Type for video stream settings.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoStreamSettings {
    /// Frames per second
    #[prost(float, tag = "1")]
    pub frame_rate_hz: f32,
    /// Horizontal resolution (in pixels)
    #[prost(uint32, tag = "2")]
    pub horizontal_resolution_pix: u32,
    /// Vertical resolution (in pixels)
    #[prost(uint32, tag = "3")]
    pub vertical_resolution_pix: u32,
    /// Bit rate (in bits per second)
    #[prost(uint32, tag = "4")]
    pub bit_rate_b_s: u32,
    /// Video image rotation (clockwise, 0-359 degrees)
    #[prost(uint32, tag = "5")]
    pub rotation_deg: u32,
    /// Video stream URI
    #[prost(string, tag = "6")]
    pub uri: ::prost::alloc::string::String,
    /// Horizontal fov in degrees
    #[prost(float, tag = "7")]
    pub horizontal_fov_deg: f32,
}
/// Information about the video stream.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoStreamInfo {
    /// Video stream settings
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<VideoStreamSettings>,
    /// Current status of video streaming
    #[prost(enumeration = "video_stream_info::VideoStreamStatus", tag = "2")]
    pub status: i32,
    /// Light-spectrum of the video stream
    #[prost(enumeration = "video_stream_info::VideoStreamSpectrum", tag = "3")]
    pub spectrum: i32,
}
/// Nested message and enum types in `VideoStreamInfo`.
pub mod video_stream_info {
    /// Video stream status type.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum VideoStreamStatus {
        /// Video stream is not running
        NotRunning = 0,
        /// Video stream is running
        InProgress = 1,
    }
    impl VideoStreamStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                VideoStreamStatus::NotRunning => "VIDEO_STREAM_STATUS_NOT_RUNNING",
                VideoStreamStatus::InProgress => "VIDEO_STREAM_STATUS_IN_PROGRESS",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "VIDEO_STREAM_STATUS_NOT_RUNNING" => Some(Self::NotRunning),
                "VIDEO_STREAM_STATUS_IN_PROGRESS" => Some(Self::InProgress),
                _ => None,
            }
        }
    }
    /// Video stream light spectrum type
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum VideoStreamSpectrum {
        /// Unknown
        Unknown = 0,
        /// Visible light
        VisibleLight = 1,
        /// Infrared
        Infrared = 2,
    }
    impl VideoStreamSpectrum {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                VideoStreamSpectrum::Unknown => "VIDEO_STREAM_SPECTRUM_UNKNOWN",
                VideoStreamSpectrum::VisibleLight => {
                    "VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT"
                }
                VideoStreamSpectrum::Infrared => "VIDEO_STREAM_SPECTRUM_INFRARED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "VIDEO_STREAM_SPECTRUM_UNKNOWN" => Some(Self::Unknown),
                "VIDEO_STREAM_SPECTRUM_VISIBLE_LIGHT" => Some(Self::VisibleLight),
                "VIDEO_STREAM_SPECTRUM_INFRARED" => Some(Self::Infrared),
                _ => None,
            }
        }
    }
}
/// Information about the camera status.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Status {
    /// Whether video recording is currently in process
    #[prost(bool, tag = "1")]
    pub video_on: bool,
    /// Whether a photo interval is currently in process
    #[prost(bool, tag = "2")]
    pub photo_interval_on: bool,
    /// Used storage (in MiB)
    #[prost(float, tag = "3")]
    pub used_storage_mib: f32,
    /// Available storage (in MiB)
    #[prost(float, tag = "4")]
    pub available_storage_mib: f32,
    /// Total storage (in MiB)
    #[prost(float, tag = "5")]
    pub total_storage_mib: f32,
    /// Elapsed time since starting the video recording (in seconds)
    #[prost(float, tag = "6")]
    pub recording_time_s: f32,
    /// Current folder name where media are saved
    #[prost(string, tag = "7")]
    pub media_folder_name: ::prost::alloc::string::String,
    /// Storage status
    #[prost(enumeration = "status::StorageStatus", tag = "8")]
    pub storage_status: i32,
}
/// Nested message and enum types in `Status`.
pub mod status {
    /// Storage status type.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum StorageStatus {
        /// Status not available
        NotAvailable = 0,
        /// Storage is not formatted (i.e. has no recognized file system)
        Unformatted = 1,
        /// Storage is formatted (i.e. has recognized a file system)
        Formatted = 2,
        /// Storage status is not supported
        NotSupported = 3,
    }
    impl StorageStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                StorageStatus::NotAvailable => "STORAGE_STATUS_NOT_AVAILABLE",
                StorageStatus::Unformatted => "STORAGE_STATUS_UNFORMATTED",
                StorageStatus::Formatted => "STORAGE_STATUS_FORMATTED",
                StorageStatus::NotSupported => "STORAGE_STATUS_NOT_SUPPORTED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STORAGE_STATUS_NOT_AVAILABLE" => Some(Self::NotAvailable),
                "STORAGE_STATUS_UNFORMATTED" => Some(Self::Unformatted),
                "STORAGE_STATUS_FORMATTED" => Some(Self::Formatted),
                "STORAGE_STATUS_NOT_SUPPORTED" => Some(Self::NotSupported),
                _ => None,
            }
        }
    }
}
/// Type to represent a setting option.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Option {
    /// Name of the option (machine readable)
    #[prost(string, tag = "1")]
    pub option_id: ::prost::alloc::string::String,
    /// Description of the option (human readable)
    #[prost(string, tag = "2")]
    pub option_description: ::prost::alloc::string::String,
}
/// Type to represent a setting with a selected option.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Setting {
    /// Name of a setting (machine readable)
    #[prost(string, tag = "1")]
    pub setting_id: ::prost::alloc::string::String,
    /// Description of the setting (human readable). This field is meant to be read from the drone, ignore it when setting.
    #[prost(string, tag = "2")]
    pub setting_description: ::prost::alloc::string::String,
    /// Selected option
    #[prost(message, optional, tag = "3")]
    pub option: ::core::option::Option<Option>,
    /// If option is given as a range. This field is meant to be read from the drone, ignore it when setting.
    #[prost(bool, tag = "4")]
    pub is_range: bool,
}
/// Type to represent a setting with a list of options to choose from.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SettingOptions {
    /// Name of the setting (machine readable)
    #[prost(string, tag = "1")]
    pub setting_id: ::prost::alloc::string::String,
    /// Description of the setting (human readable)
    #[prost(string, tag = "2")]
    pub setting_description: ::prost::alloc::string::String,
    /// List of options or if range \[min, max\] or \[min, max, interval\]
    #[prost(message, repeated, tag = "3")]
    pub options: ::prost::alloc::vec::Vec<Option>,
    /// If option is given as a range
    #[prost(bool, tag = "4")]
    pub is_range: bool,
}
/// Type to represent a camera information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Information {
    /// Name of the camera vendor
    #[prost(string, tag = "1")]
    pub vendor_name: ::prost::alloc::string::String,
    /// Name of the camera model
    #[prost(string, tag = "2")]
    pub model_name: ::prost::alloc::string::String,
    /// Focal length
    #[prost(float, tag = "3")]
    pub focal_length_mm: f32,
    /// Horizontal sensor size
    #[prost(float, tag = "4")]
    pub horizontal_sensor_size_mm: f32,
    /// Vertical sensor size
    #[prost(float, tag = "5")]
    pub vertical_sensor_size_mm: f32,
    /// Horizontal image resolution in pixels
    #[prost(uint32, tag = "6")]
    pub horizontal_resolution_px: u32,
    /// Vertical image resolution in pixels
    #[prost(uint32, tag = "7")]
    pub vertical_resolution_px: u32,
}
/// Camera mode type.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mode {
    /// Unknown
    Unknown = 0,
    /// Photo mode
    Photo = 1,
    /// Video mode
    Video = 2,
}
impl Mode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mode::Unknown => "MODE_UNKNOWN",
            Mode::Photo => "MODE_PHOTO",
            Mode::Video => "MODE_VIDEO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MODE_UNKNOWN" => Some(Self::Unknown),
            "MODE_PHOTO" => Some(Self::Photo),
            "MODE_VIDEO" => Some(Self::Video),
            _ => None,
        }
    }
}
/// Photos range type.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PhotosRange {
    /// All the photos present on the camera
    All = 0,
    /// Photos taken since MAVSDK got connected
    SinceConnection = 1,
}
impl PhotosRange {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PhotosRange::All => "PHOTOS_RANGE_ALL",
            PhotosRange::SinceConnection => "PHOTOS_RANGE_SINCE_CONNECTION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PHOTOS_RANGE_ALL" => Some(Self::All),
            "PHOTOS_RANGE_SINCE_CONNECTION" => Some(Self::SinceConnection),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod camera_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    ///
    /// Can be used to manage cameras that implement the MAVLink
    /// Camera Protocol: https://mavlink.io/en/protocol/camera.html.
    ///
    /// Currently only a single camera is supported.
    /// When multiple cameras are supported the plugin will need to be
    /// instantiated separately for every camera and the camera selected using
    /// `select_camera`.
    #[derive(Debug, Clone)]
    pub struct CameraServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CameraServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CameraServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CameraServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            CameraServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///
        /// Prepare the camera plugin (e.g. download the camera definition, etc).
        pub async fn prepare(
            &mut self,
            request: impl tonic::IntoRequest<super::PrepareRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PrepareResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/Prepare",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.camera.CameraService", "Prepare"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Take one photo.
        pub async fn take_photo(
            &mut self,
            request: impl tonic::IntoRequest<super::TakePhotoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TakePhotoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/TakePhoto",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.camera.CameraService", "TakePhoto"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Start photo timelapse with a given interval.
        pub async fn start_photo_interval(
            &mut self,
            request: impl tonic::IntoRequest<super::StartPhotoIntervalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StartPhotoIntervalResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/StartPhotoInterval",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "StartPhotoInterval",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Stop a running photo timelapse.
        pub async fn stop_photo_interval(
            &mut self,
            request: impl tonic::IntoRequest<super::StopPhotoIntervalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StopPhotoIntervalResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/StopPhotoInterval",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "StopPhotoInterval",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Start a video recording.
        pub async fn start_video(
            &mut self,
            request: impl tonic::IntoRequest<super::StartVideoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StartVideoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/StartVideo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.camera.CameraService", "StartVideo"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Stop a running video recording.
        pub async fn stop_video(
            &mut self,
            request: impl tonic::IntoRequest<super::StopVideoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StopVideoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/StopVideo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.camera.CameraService", "StopVideo"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Start video streaming.
        pub async fn start_video_streaming(
            &mut self,
            request: impl tonic::IntoRequest<super::StartVideoStreamingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StartVideoStreamingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/StartVideoStreaming",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "StartVideoStreaming",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Stop current video streaming.
        pub async fn stop_video_streaming(
            &mut self,
            request: impl tonic::IntoRequest<super::StopVideoStreamingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StopVideoStreamingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/StopVideoStreaming",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "StopVideoStreaming",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Set camera mode.
        pub async fn set_mode(
            &mut self,
            request: impl tonic::IntoRequest<super::SetModeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetModeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SetMode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.camera.CameraService", "SetMode"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// List photos available on the camera.
        pub async fn list_photos(
            &mut self,
            request: impl tonic::IntoRequest<super::ListPhotosRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListPhotosResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/ListPhotos",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.camera.CameraService", "ListPhotos"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Subscribe to camera mode updates.
        pub async fn subscribe_mode(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeModeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ModeResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SubscribeMode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.camera.CameraService", "SubscribeMode"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        ///
        /// Subscribe to camera information updates.
        pub async fn subscribe_information(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeInformationRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::InformationResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SubscribeInformation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "SubscribeInformation",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        ///
        /// Subscribe to video stream info updates.
        pub async fn subscribe_video_stream_info(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeVideoStreamInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::VideoStreamInfoResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SubscribeVideoStreamInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "SubscribeVideoStreamInfo",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        ///
        /// Subscribe to capture info updates.
        pub async fn subscribe_capture_info(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeCaptureInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::CaptureInfoResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SubscribeCaptureInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "SubscribeCaptureInfo",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        ///
        /// Subscribe to camera status updates.
        pub async fn subscribe_status(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StatusResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SubscribeStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.camera.CameraService", "SubscribeStatus"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        ///
        /// Get the list of current camera settings.
        pub async fn subscribe_current_settings(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeCurrentSettingsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::CurrentSettingsResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SubscribeCurrentSettings",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "SubscribeCurrentSettings",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        ///
        /// Get the list of settings that can be changed.
        pub async fn subscribe_possible_setting_options(
            &mut self,
            request: impl tonic::IntoRequest<
                super::SubscribePossibleSettingOptionsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<super::PossibleSettingOptionsResponse>,
            >,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SubscribePossibleSettingOptions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.camera.CameraService",
                        "SubscribePossibleSettingOptions",
                    ),
                );
            self.inner.server_streaming(req, path, codec).await
        }
        ///
        /// Set a setting to some value.
        ///
        /// Only setting_id of setting and option_id of option needs to be set.
        pub async fn set_setting(
            &mut self,
            request: impl tonic::IntoRequest<super::SetSettingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetSettingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/SetSetting",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.camera.CameraService", "SetSetting"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Get a setting.
        ///
        /// Only setting_id of setting needs to be set.
        pub async fn get_setting(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSettingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSettingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/GetSetting",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.camera.CameraService", "GetSetting"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Format storage (e.g. SD card) in camera.
        ///
        /// This will delete all content of the camera storage!
        pub async fn format_storage(
            &mut self,
            request: impl tonic::IntoRequest<super::FormatStorageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FormatStorageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.camera.CameraService/FormatStorage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.camera.CameraService", "FormatStorage"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
