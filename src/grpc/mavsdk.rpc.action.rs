// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArmRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArmResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisarmRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisarmResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeoffRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeoffResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LandRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LandResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RebootRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RebootResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShutdownRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShutdownResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KillRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KillResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReturnToLaunchRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReturnToLaunchResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GotoLocationRequest {
    /// Latitude (in degrees)
    #[prost(double, tag = "1")]
    pub latitude_deg: f64,
    /// Longitude (in degrees)
    #[prost(double, tag = "2")]
    pub longitude_deg: f64,
    /// Altitude AMSL (in meters)
    #[prost(float, tag = "3")]
    pub absolute_altitude_m: f32,
    /// Yaw angle (in degrees, frame is NED, 0 is North, positive is clockwise)
    #[prost(float, tag = "4")]
    pub yaw_deg: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GotoLocationResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoOrbitRequest {
    /// Radius of circle (in meters)
    #[prost(float, tag = "1")]
    pub radius_m: f32,
    /// Tangential velocity (in m/s)
    #[prost(float, tag = "2")]
    pub velocity_ms: f32,
    /// Yaw behavior of vehicle (ORBIT_YAW_BEHAVIOUR)
    #[prost(enumeration = "OrbitYawBehavior", tag = "3")]
    pub yaw_behavior: i32,
    /// Center point latitude in degrees. NAN: use current latitude for center
    #[prost(double, tag = "5")]
    pub latitude_deg: f64,
    /// Center point longitude in degrees. NAN: use current longitude for center
    #[prost(double, tag = "6")]
    pub longitude_deg: f64,
    /// Center point altitude in meters. NAN: use current altitude for center
    #[prost(double, tag = "7")]
    pub absolute_altitude_m: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoOrbitResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HoldRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HoldResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetActuatorRequest {
    /// Index of actuator (starting with 1)
    #[prost(int32, tag = "1")]
    pub index: i32,
    /// Value to set the actuator to (normalized from \[-1..1\])
    #[prost(float, tag = "2")]
    pub value: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetActuatorResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransitionToFixedwingRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransitionToFixedwingResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransitionToMulticopterRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransitionToMulticopterResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTakeoffAltitudeRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTakeoffAltitudeResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
    /// Takeoff altitude relative to ground/takeoff location (in meters)
    #[prost(float, tag = "2")]
    pub altitude: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTakeoffAltitudeRequest {
    /// Takeoff altitude relative to ground/takeoff location (in meters)
    #[prost(float, tag = "1")]
    pub altitude: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetTakeoffAltitudeResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMaximumSpeedRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMaximumSpeedResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
    /// Maximum speed (in metres/second)
    #[prost(float, tag = "2")]
    pub speed: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMaximumSpeedRequest {
    /// Maximum speed (in metres/second)
    #[prost(float, tag = "1")]
    pub speed: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMaximumSpeedResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReturnToLaunchAltitudeRequest {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReturnToLaunchAltitudeResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
    /// Return altitude relative to takeoff location (in meters)
    #[prost(float, tag = "2")]
    pub relative_altitude_m: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetReturnToLaunchAltitudeRequest {
    /// Return altitude relative to takeoff location (in meters)
    #[prost(float, tag = "1")]
    pub relative_altitude_m: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetReturnToLaunchAltitudeResponse {
    #[prost(message, optional, tag = "1")]
    pub action_result: ::core::option::Option<ActionResult>,
}
/// Result type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionResult {
    /// Result enum value
    #[prost(enumeration = "action_result::Result", tag = "1")]
    pub result: i32,
    /// Human-readable English string describing the result
    #[prost(string, tag = "2")]
    pub result_str: ::prost::alloc::string::String,
}
/// Nested message and enum types in `ActionResult`.
pub mod action_result {
    /// Possible results returned for action requests.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Result {
        /// Unknown result
        Unknown = 0,
        /// Request was successful
        Success = 1,
        /// No system is connected
        NoSystem = 2,
        /// Connection error
        ConnectionError = 3,
        /// Vehicle is busy
        Busy = 4,
        /// Command refused by vehicle
        CommandDenied = 5,
        /// Command refused because landed state is unknown
        CommandDeniedLandedStateUnknown = 6,
        /// Command refused because vehicle not landed
        CommandDeniedNotLanded = 7,
        /// Request timed out
        Timeout = 8,
        /// Hybrid/VTOL transition support is unknown
        VtolTransitionSupportUnknown = 9,
        /// Vehicle does not support hybrid/VTOL transitions
        NoVtolTransitionSupport = 10,
        /// Error getting or setting parameter
        ParameterError = 11,
    }
    impl Result {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Result::Unknown => "RESULT_UNKNOWN",
                Result::Success => "RESULT_SUCCESS",
                Result::NoSystem => "RESULT_NO_SYSTEM",
                Result::ConnectionError => "RESULT_CONNECTION_ERROR",
                Result::Busy => "RESULT_BUSY",
                Result::CommandDenied => "RESULT_COMMAND_DENIED",
                Result::CommandDeniedLandedStateUnknown => {
                    "RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN"
                }
                Result::CommandDeniedNotLanded => "RESULT_COMMAND_DENIED_NOT_LANDED",
                Result::Timeout => "RESULT_TIMEOUT",
                Result::VtolTransitionSupportUnknown => {
                    "RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN"
                }
                Result::NoVtolTransitionSupport => "RESULT_NO_VTOL_TRANSITION_SUPPORT",
                Result::ParameterError => "RESULT_PARAMETER_ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "RESULT_UNKNOWN" => Some(Self::Unknown),
                "RESULT_SUCCESS" => Some(Self::Success),
                "RESULT_NO_SYSTEM" => Some(Self::NoSystem),
                "RESULT_CONNECTION_ERROR" => Some(Self::ConnectionError),
                "RESULT_BUSY" => Some(Self::Busy),
                "RESULT_COMMAND_DENIED" => Some(Self::CommandDenied),
                "RESULT_COMMAND_DENIED_LANDED_STATE_UNKNOWN" => {
                    Some(Self::CommandDeniedLandedStateUnknown)
                }
                "RESULT_COMMAND_DENIED_NOT_LANDED" => Some(Self::CommandDeniedNotLanded),
                "RESULT_TIMEOUT" => Some(Self::Timeout),
                "RESULT_VTOL_TRANSITION_SUPPORT_UNKNOWN" => {
                    Some(Self::VtolTransitionSupportUnknown)
                }
                "RESULT_NO_VTOL_TRANSITION_SUPPORT" => {
                    Some(Self::NoVtolTransitionSupport)
                }
                "RESULT_PARAMETER_ERROR" => Some(Self::ParameterError),
                _ => None,
            }
        }
    }
}
/// Yaw behaviour during orbit flight.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OrbitYawBehavior {
    /// Vehicle front points to the center (default)
    HoldFrontToCircleCenter = 0,
    /// Vehicle front holds heading when message received
    HoldInitialHeading = 1,
    /// Yaw uncontrolled
    Uncontrolled = 2,
    /// Vehicle front follows flight path (tangential to circle)
    HoldFrontTangentToCircle = 3,
    /// Yaw controlled by RC input
    RcControlled = 4,
}
impl OrbitYawBehavior {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OrbitYawBehavior::HoldFrontToCircleCenter => {
                "ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TO_CIRCLE_CENTER"
            }
            OrbitYawBehavior::HoldInitialHeading => {
                "ORBIT_YAW_BEHAVIOR_HOLD_INITIAL_HEADING"
            }
            OrbitYawBehavior::Uncontrolled => "ORBIT_YAW_BEHAVIOR_UNCONTROLLED",
            OrbitYawBehavior::HoldFrontTangentToCircle => {
                "ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TANGENT_TO_CIRCLE"
            }
            OrbitYawBehavior::RcControlled => "ORBIT_YAW_BEHAVIOR_RC_CONTROLLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TO_CIRCLE_CENTER" => {
                Some(Self::HoldFrontToCircleCenter)
            }
            "ORBIT_YAW_BEHAVIOR_HOLD_INITIAL_HEADING" => Some(Self::HoldInitialHeading),
            "ORBIT_YAW_BEHAVIOR_UNCONTROLLED" => Some(Self::Uncontrolled),
            "ORBIT_YAW_BEHAVIOR_HOLD_FRONT_TANGENT_TO_CIRCLE" => {
                Some(Self::HoldFrontTangentToCircle)
            }
            "ORBIT_YAW_BEHAVIOR_RC_CONTROLLED" => Some(Self::RcControlled),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod action_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Enable simple actions such as arming, taking off, and landing.
    #[derive(Debug, Clone)]
    pub struct ActionServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ActionServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ActionServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ActionServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ActionServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        ///
        /// Send command to arm the drone.
        ///
        /// Arming a drone normally causes motors to spin at idle.
        /// Before arming take all safety precautions and stand clear of the drone!
        pub async fn arm(
            &mut self,
            request: impl tonic::IntoRequest<super::ArmRequest>,
        ) -> std::result::Result<tonic::Response<super::ArmResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Arm",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Arm"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to disarm the drone.
        ///
        /// This will disarm a drone that considers itself landed. If flying, the drone should
        /// reject the disarm command. Disarming means that all motors will stop.
        pub async fn disarm(
            &mut self,
            request: impl tonic::IntoRequest<super::DisarmRequest>,
        ) -> std::result::Result<tonic::Response<super::DisarmResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Disarm",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Disarm"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to take off and hover.
        ///
        /// This switches the drone into position control mode and commands
        /// it to take off and hover at the takeoff altitude.
        ///
        /// Note that the vehicle must be armed before it can take off.
        pub async fn takeoff(
            &mut self,
            request: impl tonic::IntoRequest<super::TakeoffRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TakeoffResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Takeoff",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Takeoff"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to land at the current position.
        ///
        /// This switches the drone to 'Land' flight mode.
        pub async fn land(
            &mut self,
            request: impl tonic::IntoRequest<super::LandRequest>,
        ) -> std::result::Result<tonic::Response<super::LandResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Land",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Land"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to reboot the drone components.
        ///
        /// This will reboot the autopilot, companion computer, camera and gimbal.
        pub async fn reboot(
            &mut self,
            request: impl tonic::IntoRequest<super::RebootRequest>,
        ) -> std::result::Result<tonic::Response<super::RebootResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Reboot",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Reboot"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to shut down the drone components.
        ///
        /// This will shut down the autopilot, onboard computer, camera and gimbal.
        /// This command should only be used when the autopilot is disarmed and autopilots commonly
        /// reject it if they are not already ready to shut down.
        pub async fn shutdown(
            &mut self,
            request: impl tonic::IntoRequest<super::ShutdownRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ShutdownResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Shutdown",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Shutdown"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to terminate the drone.
        ///
        /// This will run the terminate routine as configured on the drone (e.g. disarm and open the parachute).
        pub async fn terminate(
            &mut self,
            request: impl tonic::IntoRequest<super::TerminateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TerminateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Terminate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Terminate"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to kill the drone.
        ///
        /// This will disarm a drone irrespective of whether it is landed or flying.
        /// Note that the drone will fall out of the sky if this command is used while flying.
        pub async fn kill(
            &mut self,
            request: impl tonic::IntoRequest<super::KillRequest>,
        ) -> std::result::Result<tonic::Response<super::KillResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Kill",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Kill"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to return to the launch (takeoff) position and land.
        ///
        /// This switches the drone into [Return mode](https://docs.px4.io/master/en/flight_modes/return.html) which
        /// generally means it will rise up to a certain altitude to clear any obstacles before heading
        /// back to the launch (takeoff) position and land there.
        pub async fn return_to_launch(
            &mut self,
            request: impl tonic::IntoRequest<super::ReturnToLaunchRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReturnToLaunchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/ReturnToLaunch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.action.ActionService", "ReturnToLaunch"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to move the vehicle to a specific global position.
        ///
        /// The latitude and longitude are given in degrees (WGS84 frame) and the altitude
        /// in meters AMSL (above mean sea level).
        ///
        /// The yaw angle is in degrees (frame is NED, 0 is North, positive is clockwise).
        pub async fn goto_location(
            &mut self,
            request: impl tonic::IntoRequest<super::GotoLocationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GotoLocationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/GotoLocation",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.action.ActionService", "GotoLocation"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command do orbit to the drone.
        ///
        /// This will run the orbit routine with the given parameters.
        pub async fn do_orbit(
            &mut self,
            request: impl tonic::IntoRequest<super::DoOrbitRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DoOrbitResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/DoOrbit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "DoOrbit"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to hold position (a.k.a. "Loiter").
        ///
        /// Sends a command to drone to change to Hold flight mode, causing the
        /// vehicle to stop and maintain its current GPS position and altitude.
        ///
        /// Note: this command is specific to the PX4 Autopilot flight stack as
        /// it implies a change to a PX4-specific mode.
        pub async fn hold(
            &mut self,
            request: impl tonic::IntoRequest<super::HoldRequest>,
        ) -> std::result::Result<tonic::Response<super::HoldResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/Hold",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mavsdk.rpc.action.ActionService", "Hold"));
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to set the value of an actuator.
        pub async fn set_actuator(
            &mut self,
            request: impl tonic::IntoRequest<super::SetActuatorRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetActuatorResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/SetActuator",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.action.ActionService", "SetActuator"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to transition the drone to fixedwing.
        ///
        /// The associated action will only be executed for VTOL vehicles (on other vehicle types the
        /// command will fail). The command will succeed if called when the vehicle
        /// is already in fixedwing mode.
        pub async fn transition_to_fixedwing(
            &mut self,
            request: impl tonic::IntoRequest<super::TransitionToFixedwingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransitionToFixedwingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/TransitionToFixedwing",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.action.ActionService",
                        "TransitionToFixedwing",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Send command to transition the drone to multicopter.
        ///
        /// The associated action will only be executed for VTOL vehicles (on other vehicle types the
        /// command will fail). The command will succeed if called when the vehicle
        /// is already in multicopter mode.
        pub async fn transition_to_multicopter(
            &mut self,
            request: impl tonic::IntoRequest<super::TransitionToMulticopterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransitionToMulticopterResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/TransitionToMulticopter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.action.ActionService",
                        "TransitionToMulticopter",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Get the takeoff altitude (in meters above ground).
        pub async fn get_takeoff_altitude(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTakeoffAltitudeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTakeoffAltitudeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/GetTakeoffAltitude",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.action.ActionService",
                        "GetTakeoffAltitude",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Set takeoff altitude (in meters above ground).
        pub async fn set_takeoff_altitude(
            &mut self,
            request: impl tonic::IntoRequest<super::SetTakeoffAltitudeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetTakeoffAltitudeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/SetTakeoffAltitude",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.action.ActionService",
                        "SetTakeoffAltitude",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Get the vehicle maximum speed (in metres/second).
        pub async fn get_maximum_speed(
            &mut self,
            request: impl tonic::IntoRequest<super::GetMaximumSpeedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMaximumSpeedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/GetMaximumSpeed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.action.ActionService", "GetMaximumSpeed"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Set vehicle maximum speed (in metres/second).
        pub async fn set_maximum_speed(
            &mut self,
            request: impl tonic::IntoRequest<super::SetMaximumSpeedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetMaximumSpeedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/SetMaximumSpeed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("mavsdk.rpc.action.ActionService", "SetMaximumSpeed"),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Get the return to launch minimum return altitude (in meters).
        pub async fn get_return_to_launch_altitude(
            &mut self,
            request: impl tonic::IntoRequest<super::GetReturnToLaunchAltitudeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetReturnToLaunchAltitudeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/GetReturnToLaunchAltitude",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.action.ActionService",
                        "GetReturnToLaunchAltitude",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        ///
        /// Set the return to launch minimum return altitude (in meters).
        pub async fn set_return_to_launch_altitude(
            &mut self,
            request: impl tonic::IntoRequest<super::SetReturnToLaunchAltitudeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetReturnToLaunchAltitudeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mavsdk.rpc.action.ActionService/SetReturnToLaunchAltitude",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "mavsdk.rpc.action.ActionService",
                        "SetReturnToLaunchAltitude",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
