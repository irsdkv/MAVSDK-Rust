use super::super::FromRpcResponse;
use super::super::RequestError::{MavErr, RpcErr};
use super::super::RequestResult;
use super::super::TonicResult;
use futures::stream::{Stream, StreamExt};
use futures::task::{Context, Poll};
use std::convert::From;
use std::convert::Into;
use std::pin::Pin;

mod pb {
    include!("mavsdk.rpc.{{ plugin_name.lower_snake_case }}.rs");
}

{%- for enum in enums %}
{{ indent(enum, 1) }}
{%- endfor %}

{% for struct in structs %}
{{ indent(struct, 1) }}
{% endfor %}

{%- for method in methods %}
{{ indent(method, 1) }}
{%- endfor %}


impl super::super::FromChannel for {{ plugin_name.upper_camel_case}} {
    fn new(channel: ::grpcio::Channel) -> Self {
        {{ plugin_name.upper_camel_case }} {
            service_client: {{ plugin_name.lower_snake_case }}_grpc::{{ plugin_name.upper_camel_case }}ServiceClient::new(channel),
        }
    }
}
