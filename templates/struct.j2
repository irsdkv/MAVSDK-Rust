#[derive(PartialEq, Clone, Default, Debug)]
pub struct {{ name.upper_camel_case }} {
    {% for field in fields %}
    /// {{ field.description }}
    pub {{ field.name.lower_snake_case }}: {{ field.type_info.name }},
    {%- endfor %}
}

{% for nested_enum in nested_enums %}

impl From<&i32> for {{ nested_enum.name.upper_camel_case }} {
    fn from(rpc_{{ nested_enum.name.lower_snake_case }}: &i32) -> Self {
        {{ nested_enum.name.upper_camel_case }}::from_i32(rpc_{{ nested_enum.name.lower_snake_case }}).unwrap()
    }
}
{%- endfor %}

impl From<&pb::{{ name.upper_camel_case }}> for {{ name.upper_camel_case }} {
    fn from(rpc_{{ lower_snake_case }}: &pb::{{ name.upper_camel_case }}) -> {{ name.upper_camel_case }} {
        {{ name.upper_camel_case }} {
             {% for field in fields -%}
              {% if field.type_info.is_primitive %}
               {{ field.name.lower_snake_case }}: {{ field.type_info.name }}::from(&rpc_{{ lower_snake_case }}.{{ field.name.lower_snake_case }}),
              {% else %}
               {% if field.type_info.is_repeated %}
                {{ field.name.lower_snake_case }}: rpc_{{ lower_snake_case }}.{{ field.name.lower_snake_case }}.clone(),
               {% else %}
                {{ field.name.lower_snake_case }}: {{ field.type_info.name }}::from(&rpc_{{ lower_snake_case }}.{{ field.name.lower_snake_case }}.as_ref().unwrap()),
               {% endif %}
              {% endif %}
             {% endfor -%}
        }
    }
}
